{"version":3,"sources":["utils/Bootstrap.js","utils/RobotoMono.js","App.js","serviceWorker.js","index.js"],"names":["Bootstrap","react_default","a","createElement","rel","href","integrity","crossOrigin","React","Component","RobotoMono","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","serialNumber","password","buttonCombination","timeoutID","buttonRows","state","locked","statusMessage","secretKey","Promise","resolve","reject","api","console","log","fetch","then","data","catch","error","value","_this2","isInputBlocked","setState","push","clearTimeout","setTimeout","submitCombination","lock","join","masterUnlock","sn","unlock","length","isNaN","triedPassword","_this3","finishMechanicalProcess","isMasterUnlock","_this4","_this5","className","concat","bootstrap","windowStyle","utils_RobotoMono","utils_Bootstrap","cPanelBoxStyle","screenBoxStyle","statusMessageStyle","map","row","buttonRowStyle","btn","buttonStyle","onClick","pressButton","serialNumberStyle","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4eb31659.chunk.js","sourcesContent":["import React from 'react';\n\nclass Bootstrap extends React.Component {\n  render() {\n    return (\n      <link\n        rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css\"\n        integrity=\"sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS\"\n        crossOrigin=\"anonymous\"\n      />\n    )\n  }\n}\n\nexport default Bootstrap;\n","import React from 'react';\n\nclass RobotoMono extends React.Component {\n  render() {\n    return (\n      <link href='https://fonts.googleapis.com/css?family=Roboto Mono' rel='stylesheet'/>\n    );\n  }\n}\n\nexport default RobotoMono;\n","import React, { Component } from 'react';\nimport style from './App.css';\n\nimport Bootstrap from './utils/Bootstrap';\nimport RobotoMono from './utils/RobotoMono';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      locked: false,\n      statusMessage: \"\",\n    };\n  }\n\n  serialNumber = 12344235;\n  password = \"\";\n  buttonCombination = [];\n  timeoutID = null;\n  buttonRows = [\n    [\"7\",\"8\",\"9\"],\n    [\"4\",\"5\",\"6\"],\n    [\"1\",\"2\",\"3\"],\n    [\"*\",\"0\",\"L\"],\n  ];\n\n  masterUnlock(secretKey) {\n    return new Promise((resolve,reject) => {\n      let api = \"https://9w4qucosgf.execute-api.eu-central-1.amazonaws.com/default/CR-JS_team_M02a?code=\" + secretKey;\n      console.log(api);\n      fetch(api,{\n        // mode: 'no-cors',\n      })\n        .then(data => {\n          console.log(data);\n          resolve(data);\n        })\n        .catch(error => {\n          console.log(error);\n          reject();\n        });\n    });\n  }\n\n  pressButton(value) {\n    if(this.isInputBlocked()) {\n      return;\n    }\n    if(value === \"L\" && this.state.statusMessage === \"Ready\") {\n      this.lock();\n      return;\n    }\n    if(!(this.state.statusMessage === \"Service\")){\n      this.setState({statusMessage: \"\"});\n    }\n    this.buttonCombination.push(value);\n    clearTimeout(this.timeoutID);\n    this.timeoutID = setTimeout(() => {this.submitCombination()},1000);\n  }\n\n  async submitCombination() {\n    if(this.state.statusMessage === \"Service\"){\n      let secretKey = this.buttonCombination.join('');\n      this.setState({statusMessage: \"Validating\"});\n      try{\n        let response = await this.masterUnlock(secretKey);\n        if(response.sn === this.serialNumber){\n          this.unlock(true);\n        }\n        else{\n          this.setState({statusMessage: \"Error\"});\n        }\n      }\n      catch(e){\n        this.setState({statusMessage: \"Error\"});\n      }\n      this.buttonCombination = [];\n      return;\n    }\n    if(!this.state.locked){\n      if(this.buttonCombination.length < 6){ // Submited password has invalid length\n        this.setState({statusMessage: \"Error\"});\n      }\n      else{ // Submited password has valid length\n        this.password = this.buttonCombination.join('');\n        if(isNaN(this.password)){ // Submited password has non digits\n          console.log(\"Invalid pass\");\n          this.setState({statusMessage: \"Error\"});\n        }\n        else{ // Submited password is valid\n          this.setState({statusMessage: \"Ready\"});\n        }\n      }\n      this.buttonCombination = [];\n    }\n    if(this.state.locked){\n      let triedPassword = this.buttonCombination.join('');\n      if(triedPassword === this.password){\n        this.unlock(false);\n      }\n      else{\n        if(triedPassword === \"000000\"){\n          this.setState({statusMessage: \"Service\"});\n        }\n        else{\n          this.setState({statusMessage: \"Error\"});\n        }\n      }\n      this.buttonCombination = [];\n    }\n  }\n\n  lock() {\n    this.setState({statusMessage: \"Locking\"});\n    setTimeout(() => {this.finishMechanicalProcess()},3000);\n  }\n\n  unlock(isMasterUnlock) {\n    this.setState({statusMessage: \"Unlocking\"});\n    setTimeout(() => {this.finishMechanicalProcess(isMasterUnlock)},3000);\n  }\n\n  finishMechanicalProcess(isMasterUnlock) {\n    if(this.state.locked){\n      if(isMasterUnlock){\n        this.setState({statusMessage: \"\"});\n      }\n      else{\n        this.setState({statusMessage: \"Ready\"});\n      }\n    }\n    else{\n      this.setState({statusMessage: \"\"});\n    }\n    this.setState({locked: !this.state.locked});\n  }\n\n  isInputBlocked() {\n    if(this.buttonCombination.length > 5 && !this.state.statusMessage === \"Service\") {\n      return true;\n    }\n    if(this.state.statusMessage === \"Locking\") {\n      return true;\n    }\n    if(this.state.statusMessage === \"Unlocking\") {\n      return true;\n    }\n    if(this.state.statusMessage === \"Validating\") {\n      return true;\n    }\n    return false;\n  }\n\n  render() {\n    return (\n      <div className={`${bootstrap.windowStyle}`}>\n        <RobotoMono/>\n        <Bootstrap/>\n        <div className={`cPanelBox ${bootstrap.cPanelBoxStyle}`}>\n          <div className={`screenBox ${bootstrap.screenBoxStyle}`}>\n            <p>{this.state.locked ? \"Locked\" : \"Unlocked\"}</p>\n            <p className={`${bootstrap.statusMessageStyle}`}>{this.state.statusMessage}</p>\n          </div>\n          <div>\n            {\n              this.buttonRows.map(row => {\n                return (\n                  <div className={`${bootstrap.buttonRowStyle}`}>\n                    {row.map(btn => {\n                      return <div className={`button ${bootstrap.buttonStyle}`} onClick={() => {this.pressButton(btn)}}>{btn}</div>\n                    })}\n                  </div>\n              )})\n            }\n          </div>\n          <div className={`${bootstrap.serialNumberStyle}`}>\n            <small>S/N: {this.serialNumber}</small>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst bootstrap = {\n  windowStyle: \"vh-100 d-flex justify-content-center align-items-center\",\n  cPanelBoxStyle: \"d-flex flex-column align-items-center\",\n  screenBoxStyle: \"d-flex flex-column justify-content-between my-4 p-2 rounded\",\n  statusMessageStyle: \"mb-0 mr-1 align-self-end h1\",\n  buttonRowStyle: \"d-flex flex-row\",\n  buttonStyle: \"d-flex justify-content-center align-items-center m-2\",\n  serialNumberStyle: \"align-self-end mr-1\",\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}